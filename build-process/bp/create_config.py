#!/usr/bin/env python
import sys
from configobj import ConfigObj
import datetime

def create_script_config(cfgfile):
	'''
	Get the configurationss from db.cfg and create a shell script version of it 
	that the build scripts will use. This allows us to have a single config file 
	that can be rewritten for the build scripts without having to convert everything
	to python.
	'''

	now = datetime.datetime.now()

	config = ConfigObj(cfgfile)

	bpcfg = open('bp.cfg', 'w')
	bpcfg.write('###########################################################\n')
	bpcfg.write('# Do not edit this file! It is automatically generated.\n')
	bpcfg.write('# All changes should be made to ' + config['BuildScriptsConfig']['srcdb'] + '/db.cfg\n') 
	bpcfg.write('# This was created on ' + now.strftime('%Y-%m-%d %H:%M') + '\n')
	bpcfg.write('###########################################################\n\n')
	bpcfg.write('CODE_DIR="' + config['BuildScriptsConfig']['code_dir'] + '"\n')
	bpcfg.write('SRCDB="' + config['BuildScriptsConfig']['srcdb'] + '"\n')
	bpcfg.write('BUILD_DIR="' + config['BuildScriptsConfig']['build_dir'] + '"\n')
	bpcfg.write('RESOURCE_DIR="' + config['BuildScriptsConfig']['resource_dir'] + '"\n')
	bpcfg.write('STAGING_DIR="' + config['BuildScriptsConfig']['staging_dir'] + '"\n')
	bpcfg.write('ORG_DIR="' + config['BuildScriptsConfig']['org_dir'] + '"\n')
	bpcfg.write('MESHDB="' + config['BuildScriptsConfig']['meshdb'] + '"\n')
	bpcfg.write('BIOGRID_VERSION="' + config['BuildScriptsConfig']['biogrid_version'] + '"\n')
	#bpcfg.write('ASSOCDB="' + config['BuildScriptsConfig']['assocdb'] + '"\n')
        bpcfg.write('GMT_DIR="' + config['BuildScriptsConfig']['gmt_dir'] + '"\n')
	bpcfg.write('DBMIRROR="' + config['BuildScriptsConfig']['dbmirror'] + '"\n')
	bpcfg.write('TAIR_FILES="' + config['BuildScriptsConfig']['tair_files'] + '"\n')
	bpcfg.write('ENTREZ_FILES="' + config['BuildScriptsConfig']['entrez_files'] + '"\n')
	bpcfg.write('ENSEMBL_CORE="' + config['BuildScriptsConfig']['ensembl_core'] + '"\n')
	bpcfg.write('ENSEMBL_PLANTS="' + config['BuildScriptsConfig']['ensembl_plants'] + '"\n')
	bpcfg.write('ENSEMBL_METAZOA="' + config['BuildScriptsConfig']['ensembl_metazoa'] + '"\n')
	bpcfg.write('ENSEMBL_BACTERIA="' + config['BuildScriptsConfig']['ensembl_bacteria'] + '"\n')
	bpcfg.write('ENSEMBL_CORE_RELEASE="' + config['BuildScriptsConfig']['ensembl_core_release'] + '"\n')
	bpcfg.write('ENSEMBL_PLANTS_RELEASE="' + config['BuildScriptsConfig']['ensembl_plants_release'] + '"\n')
	bpcfg.write('ENSEMBL_METAZOA_RELEASE="' + config['BuildScriptsConfig']['ensembl_metazoa_release'] + '"\n')
	bpcfg.write('ENSEMBL_BACTERIA_RELEASE="' + config['BuildScriptsConfig']['ensembl_bacteria_release'] + '"\n')
	bpcfg.write('STATIC_DATA="' + config['BuildScriptsConfig']['static_data'] + '"\n')
	bpcfg.write('GEODB="' + config['BuildScriptsConfig']['geodb'] + '"\n')
	bpcfg.write('PC_ORG="' + config['BuildScriptsConfig']['pc_org'] + '"\n')
	bpcfg.write('PC_SHORT="' + config['BuildScriptsConfig']['pc_short'] + '"\n')
	bpcfg.write('IREF_ORG="' + config['BuildScriptsConfig']['iref_org'] + '"\n')
	bpcfg.write('I2D_ORG="' + config['BuildScriptsConfig']['i2d_org'] + '"\n')
	bpcfg.write('I2D_SHORT="' + config['BuildScriptsConfig']['i2d_short'] + '"\n')
	bpcfg.write('SPD_ORG="' + config['BuildScriptsConfig']['spd_org'] + '"\n')
	bpcfg.write('BIOGRID_ORG="' + config['BuildScriptsConfig']['biogrid_org'] + '"\n')


def main(args):
	if len(args) != 2:
		print 'usage: %s db.cfg' % args[0]
		sys.exit(0)

	create_script_config(args[1])


if __name__ == '__main__':
	main(sys.argv)
